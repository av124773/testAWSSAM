AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  testAWSSAM

  Sample SAM Template for testAWSSAM

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300

Resources:
  CommonUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-CommonUtilsLayer"
      Description: "Common config, client and data model"
      ContentUri: layers/common_utils/
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.10

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: hello_api.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref ConversationTable
          OPENAI_API_KEY_SECRET_NAME: "prod/testAWSSAM/test-key"
          AWS_REGION_NAME: !Ref AWS::Region
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: 
                !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/testAWSSAM/test-key-3N5hAV"
        - DynamoDBCrudPolicy: 
            TableName: !Ref ConversationTable 
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /hello
            Method: get
            ApiId: !Ref AIChatroomApiGateway
        GetConversations:
          Type: HttpApi
          Properties:
            Path: /conversations
            Method: get
            ApiId: !Ref AIChatroomApiGateway
      Layers:
        - !Ref CommonUtilsLayer

  StreamingMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: streaming_message/
      ImageConfig:
        EntryPoint:
          - "uvicorn"
          - "stream_api:app"
          - "--host"
          - "0.0.0.0"
          - "--port"
          - "8000"
      Architectures:
        - x86_64
      Timeout: 300
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
        Cors:
          AllowOrigins:
            - "*"
          AllowHeaders:
            - "Content-Type"
          AllowMethods:
            - "POST"
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref ConversationTable
          OPENAI_API_KEY_SECRET_NAME: "prod/testAWSSAM/test-key"
          AWS_REGION_NAME: !Ref AWS::Region
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/testAWSSAM/test-key-3N5hAV"
        - DynamoDBCrudPolicy: 
            TableName: !Ref ConversationTable 
    Metadata:
      # Metadata 區塊告訴 SAM 如何建置 Docker 映像檔
      Dockerfile: streaming_message/Dockerfile
      DockerContext: .
      DockerTag: stream-func-v1

  # 顯示定義 API Gateway
  AIChatroomApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: 
          - "*"
        AllowHeaders: 
          - "Content-Type"
          - "X-Amz-Date"
          - "Authorization"
          - "X-Api_Key"
          - "X-Amz-Security-Token"
        AllowMethods: 
          - "GET"
          - "POST"
          - "OPTIONS"

  # 定義 DynamoDB 表
  ConversationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AIChatroomConversations-${AWS::StackName}"
      AttributeDefinitions: # 屬性定義
        - AttributeName: conversation_id # 主鍵
          AttributeType: S # String
        - AttributeName: user_id         # GSI 的主鍵
          AttributeType: S
        - AttributeName: last_updated_at # GSI 的排序鍵
          AttributeType: S
      KeySchema: # 主鍵定義
        - AttributeName: conversation_id
          KeyType: HASH # HASH = 分區索引鍵 (Partition Key)
      BillingMode: PAY_PER_REQUEST # 按需計費模式 (On-demand)
      GlobalSecondaryIndexes: # <-- GSI，用於查詢使用者的所有對話
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH # HASH = 分區索引鍵 (Partition Key)
            - AttributeName: last_updated_at
              KeyType: RANGE # RANGE = 排序索引鍵 (Sort Key)
          Projection:
            ProjectionType: ALL # 將所有屬性都複製到索引中，方便查詢

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${AIChatroomApiGateway}.execute-api.${AWS::Region}.amazonaws.com/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  AIChatroomTableArn:
    Description: "DynamoDB Conversation Table ARN"
    Value: !GetAtt ConversationTable.Arn
  StreamingMessageFunctionUrl:
    Description: "Function URL for the Streaming Message function"
    Value: !GetAtt StreamingMessageFunctionUrl.FunctionUrl

